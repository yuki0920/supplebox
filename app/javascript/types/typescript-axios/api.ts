/* tslint:disable */
/* eslint-disable */
/**
 * SuppleBox API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from '@axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     *
     * @type {ContactContacts}
     * @memberof Contact
     */
    contacts: ContactContacts;
}
/**
 *
 * @export
 * @interface ContactContacts
 */
export interface ContactContacts {
    /**
     *
     * @type {string}
     * @memberof ContactContacts
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof ContactContacts
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof ContactContacts
     */
    title: string;
    /**
     *
     * @type {string}
     * @memberof ContactContacts
     */
    content: string;
}
/**
 *
 * @export
 * @interface CurrentUser
 */
export interface CurrentUser {
    /**
     *
     * @type {CurrentUserUser}
     * @memberof CurrentUser
     */
    user: CurrentUserUser | null;
}
/**
 *
 * @export
 * @interface CurrentUserUser
 */
export interface CurrentUserUser {
    /**
     *
     * @type {number}
     * @memberof CurrentUserUser
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof CurrentUserUser
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof CurrentUserUser
     */
    path: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {Array<Products>}
     * @memberof InlineResponse200
     */
    products: Array<Products>;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2001
     */
    total_pages: number;
    /**
     *
     * @type {Array<Posts>}
     * @memberof InlineResponse2001
     */
    posts: Array<Posts>;
}
/**
 *
 * @export
 * @interface Post
 */
export interface Post {
    /**
     *
     * @type {PostPost}
     * @memberof Post
     */
    post: PostPost;
}
/**
 *
 * @export
 * @interface Posts
 */
export interface Posts {
    /**
     *
     * @type {number}
     * @memberof Posts
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof Posts
     */
    title: string;
    /**
     *
     * @type {string}
     * @memberof Posts
     */
    content: string;
    /**
     *
     * @type {number}
     * @memberof Posts
     */
    rate: number;
    /**
     *
     * @type {string}
     * @memberof Posts
     */
    picture_url?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof Posts
     */
    is_owner: boolean;
    /**
     *
     * @type {string}
     * @memberof Posts
     */
    edit_path: string;
    /**
     *
     * @type {PostsUser}
     * @memberof Posts
     */
    user: PostsUser;
    /**
     *
     * @type {PostsProduct}
     * @memberof Posts
     */
    product: PostsProduct;
}
/**
 *
 * @export
 * @interface PostsProduct
 */
export interface PostsProduct {
    /**
     *
     * @type {string}
     * @memberof PostsProduct
     */
    image_url: string;
    /**
     *
     * @type {string}
     * @memberof PostsProduct
     */
    path: string;
    /**
     *
     * @type {string}
     * @memberof PostsProduct
     */
    title: string;
}
/**
 *
 * @export
 * @interface PostsUser
 */
export interface PostsUser {
    /**
     *
     * @type {string}
     * @memberof PostsUser
     */
    picture_url: string;
    /**
     *
     * @type {string}
     * @memberof PostsUser
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof PostsUser
     */
    gender?: string | null;
    /**
     *
     * @type {string}
     * @memberof PostsUser
     */
    height?: string | null;
    /**
     *
     * @type {string}
     * @memberof PostsUser
     */
    weight?: string | null;
}
/**
 *
 * @export
 * @interface Products
 */
export interface Products {
    /**
     *
     * @type {string}
     * @memberof Products
     */
    title: string;
    /**
     *
     * @type {string}
     * @memberof Products
     */
    image_url: string;
    /**
     *
     * @type {string}
     * @memberof Products
     */
    brand_amazon_name?: string;
    /**
     *
     * @type {string}
     * @memberof Products
     */
    product_link: string;
    /**
     *
     * @type {number}
     * @memberof Products
     */
    post_count: number;
    /**
     *
     * @type {number}
     * @memberof Products
     */
    rate: number;
    /**
     *
     * @type {number}
     * @memberof Products
     */
    likes: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create Products
         * @param {PostPost} post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (post: PostPost, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'post' is not null or undefined
            assertParamExists('createPost', 'post', post)
            const localVarPath = `/api/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (post !== undefined) {
                localVarFormParams.append('post', new Blob([JSON.stringify(post)], { type: "application/json", }));
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete Post
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePost', 'id', id)
            const localVarPath = `/api/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCurrentUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Posts
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPost: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fetchPost', 'id', id)
            const localVarPath = `/api/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Products
         * @param {number} per per page
         * @param {number} page next page
         * @param {number} [userId]
         * @param {number} [productId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPosts: async (per: number, page: number, userId?: number, productId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'per' is not null or undefined
            assertParamExists('fetchPosts', 'per', per)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('fetchPosts', 'page', page)
            const localVarPath = `/api/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get and Search Products
         * @param {number} [nextPage]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProducts: async (nextPage?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextPage !== undefined) {
                localVarQueryParameter['next_page'] = nextPage;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Post Contact
         * @param {Contact} [contact] 問い合わせに必要なパラメータ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContact: async (contact?: Contact, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contact, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Post
         * @param {number} id
         * @param {PostPost} post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost: async (id: number, post: PostPost, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePost', 'id', id)
            // verify required parameter 'post' is not null or undefined
            assertParamExists('updatePost', 'post', post)
            const localVarPath = `/api/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (post !== undefined) {
                localVarFormParams.append('post', new Blob([JSON.stringify(post)], { type: "application/json", }));
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Create Products
         * @param {PostPost} post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(post: PostPost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(post, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Delete Post
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCurrentUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Posts
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPost(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Products
         * @param {number} per per page
         * @param {number} page next page
         * @param {number} [userId]
         * @param {number} [productId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPosts(per: number, page: number, userId?: number, productId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPosts(per, page, userId, productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get and Search Products
         * @param {number} [nextPage]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProducts(nextPage?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchProducts(nextPage, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Post Contact
         * @param {Contact} [contact] 問い合わせに必要なパラメータ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContact(contact?: Contact, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContact(contact, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update Post
         * @param {number} id
         * @param {PostPost} post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePost(id: number, post: PostPost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePost(id, post, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         *
         * @summary Create Products
         * @param {PostPost} post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(post: PostPost, options?: any): AxiosPromise<object> {
            return localVarFp.createPost(post, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete Post
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deletePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCurrentUser(options?: any): AxiosPromise<CurrentUser> {
            return localVarFp.fetchCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Posts
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPost(id: number, options?: any): AxiosPromise<Post> {
            return localVarFp.fetchPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Products
         * @param {number} per per page
         * @param {number} page next page
         * @param {number} [userId]
         * @param {number} [productId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPosts(per: number, page: number, userId?: number, productId?: number, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.fetchPosts(per, page, userId, productId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get and Search Products
         * @param {number} [nextPage]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProducts(nextPage?: number, limit?: number, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.fetchProducts(nextPage, limit, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Post Contact
         * @param {Contact} [contact] 問い合わせに必要なパラメータ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContact(contact?: Contact, options?: any): AxiosPromise<object> {
            return localVarFp.postContact(contact, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update Post
         * @param {number} id
         * @param {PostPost} post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost(id: number, post: PostPost, options?: any): AxiosPromise<object> {
            return localVarFp.updatePost(id, post, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Create Products
     * @param {PostPost} post
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPost(post: PostPost, options?: any) {
        return DefaultApiFp(this.configuration).createPost(post, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete Post
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePost(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deletePost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchCurrentUser(options?: any) {
        return DefaultApiFp(this.configuration).fetchCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Posts
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchPost(id: number, options?: any) {
        return DefaultApiFp(this.configuration).fetchPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Products
     * @param {number} per per page
     * @param {number} page next page
     * @param {number} [userId]
     * @param {number} [productId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchPosts(per: number, page: number, userId?: number, productId?: number, options?: any) {
        return DefaultApiFp(this.configuration).fetchPosts(per, page, userId, productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get and Search Products
     * @param {number} [nextPage]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchProducts(nextPage?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).fetchProducts(nextPage, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Post Contact
     * @param {Contact} [contact] 問い合わせに必要なパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postContact(contact?: Contact, options?: any) {
        return DefaultApiFp(this.configuration).postContact(contact, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update Post
     * @param {number} id
     * @param {PostPost} post
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePost(id: number, post: PostPost, options?: any) {
        return DefaultApiFp(this.configuration).updatePost(id, post, options).then((request) => request(this.axios, this.basePath));
    }
}
